oop --> object oriented programming language


                                     OOPS CONCEPTS
                                         *CLASS  --> blueprint or template of object
                                         *OBJECT  --> Instance of the class
                                         *ENCAPSULATION  --> wrapping of code and data (or) hiding the data from users
                                         *INHERITANCE  --> acquire the property and behaviour from the parent class
                                         *POLYMORPHISM  --> one method in many forms
                                         *ABSTRACTION  --> showing essential details and hiding important details from the user.

__________________________________________________________________________________________________________________________________________________


                                                CLASS AND OBJECT :
                                                -----------------

        Everything in java is associated with classes and object,along with its attributes and methods.

        class is a template or blueprint for object and an object is an instance of a class
        When the individual objects are created, they inherit all the variables and methods from the class.

How to create Class?
     *use the keyword class:
     *class should always start with an uppercase first letter, and that the name of the java file should match the class name.


                                                    OBJECT:
                                                    ------
        You can access attributes by creating an object of the class, and by using the dot syntax (.):
        an object is created from a class.

How to create an object for the class?
    specify the class name, followed by the object name, and use the keyword new:


        we can also create an object of a class and access it in another class.
         (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)).
         Remember that the name of the java file should match the class name.

IMPORTANT NOTES:
---------------
       *The dot (.) is used to access the object's attributes and methods.

       *To call a method in Java, write the method name followed by a set of parentheses (), followed by a semicolon (;).

       *A class must have a matching filename (Main and Main.java).


                                                          METHODS:
                                                          -------
        methods are declared within a class  and that they are used to perform certain actions
        To call a method, write the method's name followed by two parentheses () and a semicolon;
        methods are called inside the main method.

        Static vs Public
            *Java programs that have either static or public attributes and methods.
            *Static method can be accessed without creating an object of the class
            *whereas public class which can be accessed only by objects.


                                                            CONSTRUCTORS:
                                                            ------------
        A constructor in Java is a special method that is used to initialize objects.
        The constructor is called when an object of a class is created.
        It can be used to set initial values for object attributes

        *Note that the constructor name must match the class name, and it cannot have a return type (like void).

        *Also note that the constructor is called when the object is created.

        *All classes have constructors by default: if you do not create a class constructor yourself,
         Java creates one for you. However, then you are not able to set initial values for object attributes.


                                                              MODIFIERS:
                                                              ---------
         TYPES OF MODIFIERS:
                *ACCESS MODIFIERS  -->controll the access level
                *NON-ACCESS MODIFIERS  --> do not controll access level but provide other functionality

         ACCESS MODIFIERS:
         ----------------
               For classes --> public, default
               For Attributes, method, constructor --> public, private, default, protected

         NON-ACCESS MODIFIERS:
         --------------------
               For classes --> final, abstract
               For Attributes, method --> final, static, abstract, transient, synchronized, volatile


PUBLIC    --> The class or code is accessible by any other classes
PRIVATE   --> The code is only accessible within the declared class
DEFAULT   --> The class or code is accessible in same package. This is used when you don't specify a modifier.
PROTECTED --> The code is accessible in same package and subclasses.
FINAL     --> The class or attribute or method cannot be inherited by other classes or modified or overridden respectively.
ABSTRACT  --> The class cannot be used to create objects(To access an abstract class, it must be inherited from another class.)
STATIC    --> Attributes and methods belongs to the class, rather than an object
 _________________________________________________________________________________________________________________________________________________

                                                            ENCAPSULATION:
                                                            -------------
    encapsulation --> wrapping of code and data

    encapsulation means to make sure that sensitive data is hidden from users.To achieve this,
        *declare class variable/attributes as private
        *provide public get and set methods to access and update the value of a private variable.

    private variables can  only be accessed within the same class .However it is possible to access them if we provide public get and set methods

        *the get method returns the variable value
        *the set method sets the value

    both syntax start with either get or set, followed by the name of the variable, with first letter in upper case.


Why Encapsulation?
    *Better control of class attributes and methods
    *Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
    *Flexible: the programmer can change one part of the code without affecting other parts
    *Increased security of data

 _________________________________________________________________________________________________________________________________________________

                                                             INHERITANCE:
                                                             -----------
          Inheritance --> In java it is possible to inherit attributes and methods from one class to another.

          categories of inheritance concept
          ---------------------------------
              *subclass(child) --> the class that inherits from another class
              *superclass(parent) --> the class being inherited from

          to inherit from a class , we have to use extends keyword


          note:
          ----
          If you don't want other classes to inherit from a class, use the final keyword


          Why And When To Use "Inheritance"?
              *It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.

_________________________________________________________________________________________________________________________________________________

                                                              POLYMORPHISM:
                                                              ------------

    polymorphism  -->a single action in  many forms

    types of polymorphism
    ---------------------
        *Compile-time polymorphism (static polymorphism) --> achieved by method overloading
        *runtime polymorphism (dynamic polymorphism)

    COMPILE-TIME POLYMORPHISM
    -------------------------
        *Achieved by method overloading .
        *When there are multiple methods with the same name but different parameters then these methods are said to be overloaded.
         methods can be overloaded by change in the number of arguments or/and a change in the type of arguments

    RUN-TIME POLYMORPHISM
    ---------------------
        *Achieved by method overridding.
        *Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already
         provided by one of its super-classes or parent classes.When a method in a subclass has the same name, same parameters or signature,
         and same return type(or sub-type) as a method in its super-class,
         then the method in the subclass is said to override the method in the super-class.
         The version of a method that is executed will be determined by the object that is used to invoke it.
         If an object of a parent class is used to invoke the method, then the version in the parent class will be executed,
         but if an object of the subclass is used to invoke the method, then the version in the child class will be executed.
         In other words, it is the type of the object being referred to (not the type of the reference variable)
         that determines which version of an overridden method will be executed.

_________________________________________________________________________________________________________________________________________________

                                                        ABSTRACTION:
                                                        -----------

abstraction --> process of hiding certain details and showing only essential information to user
 Abstraction can be achieved by either abstract class or interfaces

 abstract keyword is non-access modifier, used for class and methods

Abstract class:
--------------
    It is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

Abstract method:
---------------
    It can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).

Why And When To Use Abstract Classes and Methods?
        To achieve security - hide certain details and only show the important details of an object.


_________________________________________________________________________________________________________________________________________________




